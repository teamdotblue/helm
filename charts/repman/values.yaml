postgresql:
  auth:
    username: 'repman'
    database: 'repman'
    ## Uncomment to use a predefined password for postgresql
    # password: ''
  persistence:
    enabled: true
    size: 50Gi
  resources:
    limits: {}
    requests:
      memory: 3072Mi
      cpu: 250m

redis: {}
# Set a password through the values file
#  password: !ChangeM3!ChangeM3!ChangeM3!ChangeM3!

minio:
  enabled: true
  defaultBuckets: 'repman'

images:
  buddy:
    repository: buddy/repman
    # tag: ''
    pullPolicy: Always # IfNotPresent

  nginx:
    repository: nginxinc/nginx-unprivileged
    tag: stable
    pullPolicy: Always

nginx:
  servicePort: 8080
  serviceType: ClusterIP
  config:
    # Change to the local ranges of your cluster
    setRealIpFrom: '10.10.0.0/16'
    realIpHeader: 'X-Forwarded-For'

web:
  replicas: 1
  resources:
    requests: {}
#      memory: "512Mi"
#      cpu: "512m"

api:
  replicas: 2
  resources:
    requests: {}
#      memory: "512Mi"
#      cpu: "500m"

consumer:
  replicas: 2
  resources: {}

mail:
  backend: smtp
  port: 25
  host: "localhost"
  from: "repman@localhost"

ingress:
  annotations: {}
  tls: []
#    - secretName: repman.example.com
#      hosts:
#        - repman.example.com
#        - repo.repman.example.com
#        - '*.repo.repman.example.com'
  hosts:
    - name: web
      host: repman.example.com
      paths:
        # Base web path
        - path: /
          pathType: ImplementationSpecific
          service: web
        # Composer V1 api
        - path: /p/
          pathType: ImplementationSpecific
          service: api
        # Composer V2 api
        - path: /p2/
          pathType: ImplementationSpecific
          service: api
        # Dists endpoint
        - path: /dists/
          pathType: ImplementationSpecific
          service: api
        # Get all packages from repository
        - path: /packages.json
          pathType: ImplementationSpecific
          service: api
        # Report when packages are downloaded
        - path: /downloads
          pathType: ImplementationSpecific
          service: api
    - name: proxy
      host: repo.repman.example.com
      paths:
        # Base web path
        - path: /
          pathType: ImplementationSpecific
          service: web
        # Composer V1 api
        - path: /p/
          pathType: ImplementationSpecific
          service: api
        # Composer V2 api
        - path: /p2/
          pathType: ImplementationSpecific
          service: api
        # Dists endpoint
        - path: /dists/
          pathType: ImplementationSpecific
          service: api
        # Get all packages from repository
        - path: /packages.json
          pathType: ImplementationSpecific
          service: api
        # Report when packages are downloaded
        - path: /downloads
          pathType: ImplementationSpecific
          service: api
    - name: organization
      host: "*.repo.repman.example.com"
      paths:
        # Base web path
        - path: /
          pathType: ImplementationSpecific
          service: web
        # Composer V1 api
        - path: /p/
          pathType: ImplementationSpecific
          service: api
        # Composer V2 api
        - path: /p2/
          pathType: ImplementationSpecific
          service: api
        # Dists endpoint
        - path: /dists/
          pathType: ImplementationSpecific
          service: api
        # Get all packages from repository
        - path: /packages.json
          pathType: ImplementationSpecific
          service: api
        # Report when packages are downloaded
        - path: /downloads
          pathType: ImplementationSpecific
          service: api

repman:
  config:
    ### Basic options
    env: 'prod'
    debug: '0'
    url_scheme: 'https'
    app_host: 'repman.example.com'
    trusted_proxies: '127.0.0.1,REMOTE_ADDR'
    security_advisories_db_dir: '%kernel.project_dir%/var/security-advisories'
    # sentry_dsn: 'https://xxxxxxxyyyyyyyzzzzzzzzzz@sentry.io/1337'
    # allowed_package_types: 'gitlab,git'
    secret: 'c7dbd995176e079f857b6649b60ccf68'
    ### GitLab configuration options
    gitlab:
      enabled: false
      host: 'https://gitlab.com'
      client_id: 'xxxxxxxxxxxxx'
      client_secret: 'yyyyyyyyyyyy'
### This not yet implemented.
## Please configure through .Values.repman.rawEnv
#    storage:
#      source: 'storage.s3'
#      s3:
#        aws_opaque_auth: true
#        key: 'xxxxx'
#        secret: 'xxxx'
#        region: 'eu'
#        bucket: 'repman'
#        endpoint: 'https://abcdefg.objectstore.eu'
#        path_style_endpoint: true
  rawEnv: {}

hooks:
  enabled: true
  removeOnSuccess: true
  # Hook messenger-setup-transports set-up transports.
  # Can be run on every upgrade, but is only needed on
  # creation or when an update contains new queues.
  messengerSetupTransports:
    runVerbose: false
  # Hook doctrine-migrations-migrate will run doctrine
  # migrations. This will intitially set-up the DB but
  # will also auto-update the DB after an update.
  doctrineMigrationsMigrate:
    runVerbose: false

crons:
  sync-release:
    schedule: "*/5 * * * *" # At every 5th minute.
    command:
      - "/app/bin/console"
      - "repman:proxy:sync-releases"
  sync-metadata:
    schedule: "*/6 * * * *" # At every 6th minute.
    command:
      - "/app/bin/console"
      - "repman:proxy:sync-metadata"
  send-telemetry:
    schedule: "0 0 * * *" # At 00:00.
    command:
      - "/app/bin/console"
      - "repman:telemetry:send"
#  clear-old-dists:
#    schedule: "0 1 * * *" # At 01:00.
#    command:
#      - "/app/bin/console"
#      - "repman:package:clear-old-dists"
#  update-security-db:
#    schedule: "0 */2 * * *" # At minute 0 past every 2nd hour.
#    command:
#      - "/app/bin/console"
#      - "repman:security:update-db"
  update-all-packages:
    schedule: "0 */6 * * *" # At minute 0 past every 6th hour.
    command:
      - "/app/bin/console"
      - "repman:package:synchronize-all"

## File storage options
## Some files are needed on disk, and require a PVC.
#
filestorage:
  path: /app/var/security-advisories

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false

    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteMany
    size: 5Gi

    ## If existingClaim is specified, no PVC will be created and this claim will
    ## be used
    existingClaim: ""

    ## If a volumeMode needs to be specified, uncomment the following line:
    # volumeMode: Block

php:
  performanceMode:
    enabled: false
    settings:
      opcache:
        jit_buffer_size: 100M
        preload: /app/config/preload.php
        preload_user: www-data
        memory_consumption: 1024
        max_accelerated_files: 20000
        validate_timestamps: 0
        enable: yes
      zend_extension: opcache
      realpath_cache_sizeq: 4096K
      realpath_cache_ttl: 600
      error_log: /proc/self/fd/2
      catch_workers_output: yes
  config: |
    # No additional config was added
    # through values.yaml
